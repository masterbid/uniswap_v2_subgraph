// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenStandard(): string {
    let value = this.get("tokenStandard");
    return value.toString();
  }

  set tokenStandard(value: string) {
    this.set("tokenStandard", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get mintedByMarket(): string | null {
    let value = this.get("mintedByMarket");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mintedByMarket(value: string | null) {
    if (value === null) {
      this.unset("mintedByMarket");
    } else {
      this.set("mintedByMarket", Value.fromString(value as string));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Market entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Market entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Market", id.toString(), this);
  }

  static load(id: string): Market | null {
    return store.get("Market", id) as Market | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get protocolName(): string {
    let value = this.get("protocolName");
    return value.toString();
  }

  set protocolName(value: string) {
    this.set("protocolName", Value.fromString(value));
  }

  get protocolType(): string {
    let value = this.get("protocolType");
    return value.toString();
  }

  set protocolType(value: string) {
    this.set("protocolType", Value.fromString(value));
  }

  get inputTokens(): Array<string> {
    let value = this.get("inputTokens");
    return value.toStringArray();
  }

  set inputTokens(value: Array<string>) {
    this.set("inputTokens", Value.fromStringArray(value));
  }

  get outputToken(): string | null {
    let value = this.get("outputToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outputToken(value: string | null) {
    if (value === null) {
      this.unset("outputToken");
    } else {
      this.set("outputToken", Value.fromString(value as string));
    }
  }

  get rewardTokens(): Array<string> | null {
    let value = this.get("rewardTokens");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewardTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("rewardTokens");
    } else {
      this.set("rewardTokens", Value.fromStringArray(value as Array<string>));
    }
  }

  get inputTokenTotalBalances(): Array<string> {
    let value = this.get("inputTokenTotalBalances");
    return value.toStringArray();
  }

  set inputTokenTotalBalances(value: Array<string>) {
    this.set("inputTokenTotalBalances", Value.fromStringArray(value));
  }

  get outputTokenTotalSupply(): BigInt {
    let value = this.get("outputTokenTotalSupply");
    return value.toBigInt();
  }

  set outputTokenTotalSupply(value: BigInt) {
    this.set("outputTokenTotalSupply", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }
}

export class MarketSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MarketSnapshot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MarketSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MarketSnapshot", id.toString(), this);
  }

  static load(id: string): MarketSnapshot | null {
    return store.get("MarketSnapshot", id) as MarketSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get inputTokenBalances(): Array<string> {
    let value = this.get("inputTokenBalances");
    return value.toStringArray();
  }

  set inputTokenBalances(value: Array<string>) {
    this.set("inputTokenBalances", Value.fromStringArray(value));
  }

  get outputTokenTotalSupply(): BigInt {
    let value = this.get("outputTokenTotalSupply");
    return value.toBigInt();
  }

  set outputTokenTotalSupply(value: BigInt) {
    this.set("outputTokenTotalSupply", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get transactionIndexInBlock(): BigInt {
    let value = this.get("transactionIndexInBlock");
    return value.toBigInt();
  }

  set transactionIndexInBlock(value: BigInt) {
    this.set("transactionIndexInBlock", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get market(): string {
    let value = this.get("market");
    return value.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string | null {
    let value = this.get("to");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(value as string));
    }
  }

  get transactionType(): string {
    let value = this.get("transactionType");
    return value.toString();
  }

  set transactionType(value: string) {
    this.set("transactionType", Value.fromString(value));
  }

  get inputTokenAmounts(): Array<string> {
    let value = this.get("inputTokenAmounts");
    return value.toStringArray();
  }

  set inputTokenAmounts(value: Array<string>) {
    this.set("inputTokenAmounts", Value.fromStringArray(value));
  }

  get outputTokenAmount(): BigInt {
    let value = this.get("outputTokenAmount");
    return value.toBigInt();
  }

  set outputTokenAmount(value: BigInt) {
    this.set("outputTokenAmount", Value.fromBigInt(value));
  }

  get rewardTokenAmounts(): Array<string> {
    let value = this.get("rewardTokenAmounts");
    return value.toStringArray();
  }

  set rewardTokenAmounts(value: Array<string>) {
    this.set("rewardTokenAmounts", Value.fromStringArray(value));
  }

  get transferredFrom(): string | null {
    let value = this.get("transferredFrom");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferredFrom(value: string | null) {
    if (value === null) {
      this.unset("transferredFrom");
    } else {
      this.set("transferredFrom", Value.fromString(value as string));
    }
  }

  get transferredTo(): string | null {
    let value = this.get("transferredTo");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferredTo(value: string | null) {
    if (value === null) {
      this.unset("transferredTo");
    } else {
      this.set("transferredTo", Value.fromString(value as string));
    }
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    return value.toBigInt();
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionIndexInBlock(): BigInt {
    let value = this.get("transactionIndexInBlock");
    return value.toBigInt();
  }

  set transactionIndexInBlock(value: BigInt) {
    this.set("transactionIndexInBlock", Value.fromBigInt(value));
  }
}

export class AccountPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AccountPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AccountPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AccountPosition", id.toString(), this);
  }

  static load(id: string): AccountPosition | null {
    return store.get("AccountPosition", id) as AccountPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positionCounter(): BigInt {
    let value = this.get("positionCounter");
    return value.toBigInt();
  }

  set positionCounter(value: BigInt) {
    this.set("positionCounter", Value.fromBigInt(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Position entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Position entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Position", id.toString(), this);
  }

  static load(id: string): Position | null {
    return store.get("Position", id) as Position | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accountPosition(): string {
    let value = this.get("accountPosition");
    return value.toString();
  }

  set accountPosition(value: string) {
    this.set("accountPosition", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get accountAddress(): string {
    let value = this.get("accountAddress");
    return value.toString();
  }

  set accountAddress(value: string) {
    this.set("accountAddress", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get marketAddress(): string {
    let value = this.get("marketAddress");
    return value.toString();
  }

  set marketAddress(value: string) {
    this.set("marketAddress", Value.fromString(value));
  }

  get positionType(): string {
    let value = this.get("positionType");
    return value.toString();
  }

  set positionType(value: string) {
    this.set("positionType", Value.fromString(value));
  }

  get outputTokenBalance(): BigInt {
    let value = this.get("outputTokenBalance");
    return value.toBigInt();
  }

  set outputTokenBalance(value: BigInt) {
    this.set("outputTokenBalance", Value.fromBigInt(value));
  }

  get inputTokenBalances(): Array<string> {
    let value = this.get("inputTokenBalances");
    return value.toStringArray();
  }

  set inputTokenBalances(value: Array<string>) {
    this.set("inputTokenBalances", Value.fromStringArray(value));
  }

  get rewardTokenBalances(): Array<string> {
    let value = this.get("rewardTokenBalances");
    return value.toStringArray();
  }

  set rewardTokenBalances(value: Array<string>) {
    this.set("rewardTokenBalances", Value.fromStringArray(value));
  }

  get transferredTo(): Array<string> {
    let value = this.get("transferredTo");
    return value.toStringArray();
  }

  set transferredTo(value: Array<string>) {
    this.set("transferredTo", Value.fromStringArray(value));
  }

  get closed(): boolean {
    let value = this.get("closed");
    return value.toBoolean();
  }

  set closed(value: boolean) {
    this.set("closed", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get historyCounter(): BigInt {
    let value = this.get("historyCounter");
    return value.toBigInt();
  }

  set historyCounter(value: BigInt) {
    this.set("historyCounter", Value.fromBigInt(value));
  }

  get history(): Array<string> {
    let value = this.get("history");
    return value.toStringArray();
  }

  set history(value: Array<string>) {
    this.set("history", Value.fromStringArray(value));
  }
}

export class PositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PositionSnapshot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PositionSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PositionSnapshot", id.toString(), this);
  }

  static load(id: string): PositionSnapshot | null {
    return store.get("PositionSnapshot", id) as PositionSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    return value.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get outputTokenBalance(): BigInt {
    let value = this.get("outputTokenBalance");
    return value.toBigInt();
  }

  set outputTokenBalance(value: BigInt) {
    this.set("outputTokenBalance", Value.fromBigInt(value));
  }

  get inputTokenBalances(): Array<string> {
    let value = this.get("inputTokenBalances");
    return value.toStringArray();
  }

  set inputTokenBalances(value: Array<string>) {
    this.set("inputTokenBalances", Value.fromStringArray(value));
  }

  get rewardTokenBalances(): Array<string> {
    let value = this.get("rewardTokenBalances");
    return value.toStringArray();
  }

  set rewardTokenBalances(value: Array<string>) {
    this.set("rewardTokenBalances", Value.fromStringArray(value));
  }

  get transferredTo(): Array<string> {
    let value = this.get("transferredTo");
    return value.toStringArray();
  }

  set transferredTo(value: Array<string>) {
    this.set("transferredTo", Value.fromStringArray(value));
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pair", id.toString(), this);
  }

  static load(id: string): Pair | null {
    return store.get("Pair", id) as Pair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get token0(): string {
    let value = this.get("token0");
    return value.toString();
  }

  set token0(value: string) {
    this.set("token0", Value.fromString(value));
  }

  get token1(): string {
    let value = this.get("token1");
    return value.toString();
  }

  set token1(value: string) {
    this.set("token1", Value.fromString(value));
  }

  get reserve0(): BigInt {
    let value = this.get("reserve0");
    return value.toBigInt();
  }

  set reserve0(value: BigInt) {
    this.set("reserve0", Value.fromBigInt(value));
  }

  get reserve1(): BigInt {
    let value = this.get("reserve1");
    return value.toBigInt();
  }

  set reserve1(value: BigInt) {
    this.set("reserve1", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get history(): Array<string> {
    let value = this.get("history");
    return value.toStringArray();
  }

  set history(value: Array<string>) {
    this.set("history", Value.fromStringArray(value));
  }
}

export class PairSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PairSnapshot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PairSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PairSnapshot", id.toString(), this);
  }

  static load(id: string): PairSnapshot | null {
    return store.get("PairSnapshot", id) as PairSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get reserve0(): BigInt {
    let value = this.get("reserve0");
    return value.toBigInt();
  }

  set reserve0(value: BigInt) {
    this.set("reserve0", Value.fromBigInt(value));
  }

  get reserve1(): BigInt {
    let value = this.get("reserve1");
    return value.toBigInt();
  }

  set reserve1(value: BigInt) {
    this.set("reserve1", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get transactionIndexInBlock(): BigInt {
    let value = this.get("transactionIndexInBlock");
    return value.toBigInt();
  }

  set transactionIndexInBlock(value: BigInt) {
    this.set("transactionIndexInBlock", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Mint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Mint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Mint", id.toString(), this);
  }

  static load(id: string): Mint | null {
    return store.get("Mint", id) as Mint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (value === null) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(value as string));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(value as string));
    }
  }

  get liquidityAmount(): BigInt | null {
    let value = this.get("liquidityAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidityAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidityAmount");
    } else {
      this.set("liquidityAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get amount0(): BigInt | null {
    let value = this.get("amount0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount0(value: BigInt | null) {
    if (value === null) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigInt(value as BigInt));
    }
  }

  get amount1(): BigInt | null {
    let value = this.get("amount1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount1(value: BigInt | null) {
    if (value === null) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigInt(value as BigInt));
    }
  }

  get transferEventApplied(): boolean {
    let value = this.get("transferEventApplied");
    return value.toBoolean();
  }

  set transferEventApplied(value: boolean) {
    this.set("transferEventApplied", Value.fromBoolean(value));
  }

  get syncEventApplied(): boolean {
    let value = this.get("syncEventApplied");
    return value.toBoolean();
  }

  set syncEventApplied(value: boolean) {
    this.set("syncEventApplied", Value.fromBoolean(value));
  }

  get mintEventApplied(): boolean {
    let value = this.get("mintEventApplied");
    return value.toBoolean();
  }

  set mintEventApplied(value: boolean) {
    this.set("mintEventApplied", Value.fromBoolean(value));
  }
}

export class Burn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Burn entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Burn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Burn", id.toString(), this);
  }

  static load(id: string): Burn | null {
    return store.get("Burn", id) as Burn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (value === null) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(value as string));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (value === null) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(value as string));
    }
  }

  get liquidityAmount(): BigInt | null {
    let value = this.get("liquidityAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidityAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidityAmount");
    } else {
      this.set("liquidityAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get amount0(): BigInt | null {
    let value = this.get("amount0");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount0(value: BigInt | null) {
    if (value === null) {
      this.unset("amount0");
    } else {
      this.set("amount0", Value.fromBigInt(value as BigInt));
    }
  }

  get amount1(): BigInt | null {
    let value = this.get("amount1");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount1(value: BigInt | null) {
    if (value === null) {
      this.unset("amount1");
    } else {
      this.set("amount1", Value.fromBigInt(value as BigInt));
    }
  }

  get transferEventApplied(): boolean {
    let value = this.get("transferEventApplied");
    return value.toBoolean();
  }

  set transferEventApplied(value: boolean) {
    this.set("transferEventApplied", Value.fromBoolean(value));
  }

  get syncEventApplied(): boolean {
    let value = this.get("syncEventApplied");
    return value.toBoolean();
  }

  set syncEventApplied(value: boolean) {
    this.set("syncEventApplied", Value.fromBoolean(value));
  }

  get burnEventApplied(): boolean {
    let value = this.get("burnEventApplied");
    return value.toBoolean();
  }

  set burnEventApplied(value: boolean) {
    this.set("burnEventApplied", Value.fromBoolean(value));
  }
}
